三种入口方式：
1. jQuery的简洁引入方式 $(function(){ });
//标准引入方式
2.$(document).ready(function(){
		alert($);
	});
3. js引入方式
window.onload = function(){
		alert($);
	}
//////////////////////////////////////////////////////////////////////////////

		$("a").html("我确实是百度了啦啦啦啦");//相当于innerHTML
		$("a").addClass("cc"); //加上类cc
		$("a").removeClass("cc");移除类cc
		$("a").toggleClass("cc");//有就移除cc，没有就加上，常用于点击自己循环消失出现
		$("a").attr("title","你猜我是谁");//更改属性值
		$("a").removeAttr("title");//移除属性
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
索引的用法&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
$(selector).index(); 例如$(".cc").index(); $(this).index();
$(selector).index(element);例如$("li").index($(".cc"));  $("li").index(this);

    
    、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、
  //全选，不选，和反选的案例  
    <!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>全选，全不选，反选</title>
	<script src="jquery-1.8.2.min.js"></script>
</head>
<body>
	<input type="checkbox">选吧<br>
	<input type="checkbox">选吧<br>
	<input type="checkbox">选吧<br>
	<input type="checkbox">选吧<br>
	<button>全选</button>
	<button>不选</button>
	<button>反选</button>
</body>
</html>
<script>
	$(function(){
	/*	$("button:eq(0)").click(function(){
			$("input").attr("checked",true);
		});
		$("button:eq(1)").click(function(){
			$(":checkbox").attr("checked",false);

		});
		$("button:eq(2)").click(function(){
			var list = $(":checked")
			$("input:checkbox").attr("checked",true);
			list.attr("checked",false);
		});
*/
		$("button").click(function(){
			switch($(this).html() ){
					case "全选":
					$("input").attr("checked",true);
					break;
					case "不选":
					$(":checkbox").attr("checked",false);
					break;

					case "反选":
					//1.首先获取已经选中的
					var list= $(":input:checked");
					//2.把所有的全部选中
					$("input:checkbox").attr("checked",true);
					//3.第一步选中的 改为不选中
					list.attr("checked",false);
				}
		});
	});
</script>

、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、

$(selector).hide(speed,callback);
$(selector).show(speed,callback);
$(selector).toggle(speed,callback);相当于上面2个的结合体

.fadeIn();
.fadeOut();
.fadeToggle();相当于上面2个结合体

slideDown()
slideUp()
slideToggle()相当于上面2个结合体

、、、、、、、、、、、、、、、、、、、、、、、、、、、、
.val();相当于js里面的.value;
.html();相当于js里面的 .innerHTML;
.text();相当于js的.innerTEXT

、、、、、、、、、、、、、、、、、、、、、、、、、、、、
常用的事件绑定：.click(function(){   });
.bind("click",function(){  });
.live("click",function(){  });
.on("click",function(){  });最常用的
.one("click",function(){  });一次性的点击事件

	$(".b3").on("click" ,function(){
			$(".b2").off("click"); //.off();取消事件
		});
	//trigger();方法触发被选中元素的指定类型
		$(".b4").click(function(){
			$(".b2").trigger("click");//触发b2的点击事件.trigger("click")

		});
		//上传文件经常用到此
		$(".b5").click(function(){

			$("input").trigger("click"); 
		});
		
	
****************如果trigger想触发a点击事件，且又需要a跳转，则需要在a里面对文字加span包起来。如果不需要跳转不用包。

1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111

*****************移入移出触发联动
		
		//$("选择器").hover(infunction,outfunction);   *****************************
		$("li").hover(function(){
			$(this).css("background","red");
		},function(){
			$("li").css("background","#fff");
		});
	
		
		$("p").toggle(//点击时，让三个背景图轮流切换
		  function(){
		  $("body").css("background-color","green");},
		  function(){
		  $("body").css("background-color","red");},
		  function(){
		  $("body").css("background-color","yellow");}
		);
		
		
		
		
		        /*  
        //鼠标的移入移出  
        $(".header").mouseover(function (){  
            $(".content").show();  
        }).mouseout(function (){  
            $(".content").hide();  
        });  
        */  
        /*  
        //合成事件 hover()  
        $(".header").hover(function (){  
            $(".content").show();  
        },function (){  
            $(".content").hide();  
        });  
        */ 
		
		
		
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111	
内部前添加
$("ul").prepend("<li>"+value+"</li>");
$("<li>"+value+"</li>").prependTo("ul");		

内部后添加
$("ul").append("<li>"+value+"</li>");
$("<li>"+value+"</li>").appendTo("ul");

同级前添加
$(".yangshi").before("<li>"+value+"</li>");*/
$("<li>"+value+"</li>").insertBefore($(".yangshi"));

同级后添加
$("<li>"+value+"</li>").insertAfter($(".yangshi"));
$(".yangshi").after("<li>"+value+"</li>");
、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、

//获取div 并添加一个外包裹
$("div").wrap(function(){
	return "<a href='http://www.baidu.com'></a>";

});

//获取li并添加一个内包裹
$("li").wrapInner(function(){
	return "<a href='http://www.baidu.com'></a>";

});

//获取b标签  替换成i标签
//replaceWith  用指定的html内容或者元素替换被选元素
$("b").replaceWith(function(){
	return "<i>"+$(this).html()+"</i>";

});

、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、
		$("ul li").click(function(){

			$(this).addClass("yangshi").siblings().removeClass("yangshi");//为当前元素加样式，其余兄弟元素去掉样式

		});
		$("button:eq(0)").click(function(){
			$(".yangshi").remove();//带类yangshi的元素删除

		});
		$("button:eq(1)").click(function(){
			//$(".yangshi").empty(); //清空选中的里面的内容

		$("ul").empty();//清空所有，带标签一块清
		});


、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、。。。。。。。。。。。。
*********************************each遍历******************************************
	$(function(){
/*		var arr = [1,2,3,4,5,6,7,8,9,0];
		$.each(arr,function(){
			console.log(this);
			alert(this);
		});*/

	//delay() 方法对队列中的下一项执行设置延迟
	//fadeOut 使用淡出的效果来隐藏被选元素 加入该元素是隐藏的
	$(".yangshi").click(function(){
		i = 0;
	/*	$("li").each(function(){
			$(this).css("background","orange").delay(i*200).fadeOut(1500);
			i++;
		});
*/
		$.each($("li"),function(){

			$(this).css("background","orange").delay(i*200).fadeOut(1500);
			i++;
		});
	});
、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、
		$("button").eq(9).click(function(){
			$("div").animate({"width":"700px","height":"700px"},1000); 动画里面的属性，必须带大括号{}
			$("div").animate({"width":"600px","height":"450px"},1000);
		});
		$("button").eq(10).click(function(){
			$("div").stop();//停止当前动画，再点击自定义动画后可以继续
		});
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111

	$(function(){
		var str = "iloveyouphp";
		var p =/love/;//正则
		console.log(p);
		console.log(typeof p);
	// test()  用于检测一个字符串是否匹配某个模式

	//如果字符串中有匹配的  返回true  否则是false
	var a = p.test(str);
	console.log(a); //true


	//exec() 方法用于检索字符串中的正则表达式的匹配
	//返回一个数组  用于存放匹配的结果 如果没有找到  返回值为null

、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、
关于冒泡和return false




<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Document</title>
	<script type="text/javascript" src="./jquery-1.8.2.min.js"></script>
	<style>
		div{
			border-radius: 500px;
		}
		#box1{

			width:500px;
			height:500px;
			background-color: orange;
			position: absolute;
		}

		#box2{

			width:400px;
			height:400px;
			background-color: green;
			position: absolute;
			top:50px;
		}

		#box3{

			width:300px;
			height:300px;
			background-color: red;
			position: absolute;
			top:50px;
		}

		#box4{

			width:200px;
			height:200px;
			background-color: blue;
			position: absolute;
			top:50px;
		}

		#box5{

			width:100px;
			height:100px;
			background-color: pink;
			position: absolute;
			top:50px;
		}
	</style>
</head>
<body>
	<div id="box1">
		<div id="box2">
			<div id="box3">
				<div id="box4">
					<div id="box5"></div>
				</div>
			</div>
		</div>
	</div>
</body>
</html>
<script>
		// js的事件冒泡
		// e.stopPropagation()

		// e.cancelBubblue
	$(function(){
		$("div").on("click",function(){
			$(this).css("background","#ccc");
			return false;//阻止事件冒泡
		});
		var a = true;

	
		if(a){

			console.log(1);

			return ;//阻止事件，下面的不执行

			console.log(2);
			console.log(3);
			console.log(4);
			console.log(5);
			console.log(6);
			console.log(7);
			console.log(8);
			console.log(9);
			console.log(10);
			console.log(11);
		}



	// //return 函数里  返回值  一个函数里只有一个返回值  

	// //阻止默认事件的行为
	// <a href="http://www.baidu.com" onclick="return func()">百度</a>

	// function func(){

	// 	return false;
	// }
	//return; 终止代码行为

		// //取消事件的冒泡 return false





	})




</script>


；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；；
1.入口函数
1          $(document).ready(function(){});

2          $(function(){});

jQuery入口函数与js入口函数的区别：

jQuery的入口函数是在 html所有标签都加载之后，就会去执行。

Js的window.onload事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行

 

2.jQuery选择器
基本选择器
基本选择器

符号

说明

用法

$(“#demo”)

id选择器

$(“#demo”).css(“background”,”red”)

$(“.liItem”)

类选择器

$(“.liItem”). css(“background”,”red”);

$(“div”)

标签选择器

$(“div”). css(“background”,”red”);

$(“*”)

通配符选择器

$(“*”). css(“background”,”red”)

$(“.liItem,div”)

并集选择器

$(“.liItem,div”). css(“background”,”red”)

 

层级选择器
 

符号

说明

用法

空格

后代选择器

选择所有的后代元素

$(“div span”). css(“background”,”red”);

> 

子代选择器

选择所有的子代元素

$(“div > span”). css(“background”,”red”)

+

紧邻选择器

选择紧挨着的下一个元素

$(“div + p”). css(“background”,”red”)

~

兄弟选择器

选择后面的所有的兄弟元素

$(“div ~ p”). css(“background”,”red”)

 

过滤选择器
基本过滤选择器

符号

说明

用法

:eq(index)

index是从0开始的一个数字，选择序号为index的元素。选择第一个匹配的元素。

$(“li:eq(1)”). css(“background”,”red”)

:gt(index)

选择序号大于index的元素

$(“li:gt(2)”). css(“background”,”red”)

:lt(index)

选择小于index 的元素

$(“li:lt(2)”). css(“background”,”red”)

:odd

选择所有序号为奇数行的元素

$(“li:odd”). css(“background”,”red”)

:even

选择所有序号为偶数的元素

$(“li:even”). css(“background”,”red”)

:first

选择匹配第一个元素

$(“li:first”). css(“background”,”red”)

:last

选择匹配的最后一个元素

$(“li:last”). css(“background”,”red”)

 

属性选择器
属性选择器

符号

说明

用法

$(“a[href]”)

选择所有包含href属性的元素

$(“a[href]”). css(“background”,”red”)

$(“a[href=’itcast’]”)

选择href属性值为itcast的所有a标签

$(“a[href=’itcast’]”). css(“background”,”red”)

$(“a[href!=’baidu’]”)

选择所有href属性不等baidu的所有元素，包括没有href的元素

$(“a[href!=’baidu’]”). css(“background”,”red”)

$(“a[href^=’web’]”)

选择所有以web开头的元素

$(“a[href^=’web’]”). css(“background”,”red”)

$(“a[href$=’cn’]”)

选择所有以cn结尾的元素

$(“a[href$=’cn’]”). css(“background”,”red”)

$(“a[href*=’i’]”)

选择所有包含i这个字符的元素，可以是中英文

$(“a[href*=’i’]”). css(“background”,”red”)

$(“a[href][title=’我’]”)

选择所有符合指定属性规则的元素，都符合才会被选中。

$(“a[href][title=’我’]”). css(“background”,”red”)

 

筛选选择器
基本过滤选择器

符号

说明

用法

.eq(index)

index是从0开始的一个数字，选择序号为index的元素。

$(“li”).eq(1). css(“background”,”red”)

.first( )

选择匹配第一个元素

$(“li”).first(). css(“background”,”red”)

.last( )

选择匹配的最后一个元素

$(“li”).last(). css(“background”,”red”)

.parent( )

选择父亲元素

$(“li”).parent(). css(“background”,”red”)

.siblings( )

选择所有的亲兄弟元素，不包括自己

$(“li”).sibling(). css(“background”,”red”)

.find( )

查找所有的后代元素

$(“li”).find(). css(“background”,”red”)

.prevAll()

选择这个元素之前的所有亲兄弟元素

…

.nextAll()

选择这个元素之后的所有亲兄弟元素

…

3.jQuery动画
显示/隐藏
1          $(selector).show(speed,callback);

2          $(selector).hide(speed,callback);

3          $(selector).toggle(speed,callback);

speed：隐藏/显示的速度，可以取以下值："slow"、"fast" 或毫秒

callback：隐藏或显示完成后所执行的函数

滑动
1          $(selector).slideDown(speed,callback);

2          $(selector).slideUp(speed,callback);

3          $(selector).slideToggle(speed,callback);

淡入淡出
1          $(selector).fadeIn(speed,callback);

2          $(selector).fadeOut(speed,callback);

3          $(selector).fadeToggle(speed,callback);

4          $(selector).fadeTo(speed,opacity,callback);

opacity：必选参数，将淡入淡出效果设置为给定的不透明度

自定义动画
1          $(selector).animate({params},speed,callback);

必需的 params 参数定义形成动画的 CSS 属性。

可选的 speed 参数规定效果的时长。它可以取以下值："slow"、"fast" 或毫秒。

可选的 callback 参数是动画完成后所执行的函数名称。

操作多个属性

停止动画
1          $(selector).stop(stopAll,goToEnd);

可选的 stopAll 参数规定是否应该清除动画队列。默认是 false。

可选的 goToEnd 参数规定是否立即完成当前动画。默认是 false。

stop(true)              所有动画不执行

stop(false,true)       动画立即执行完毕，这种用法使用较多

 

4.jQuery HTML
操作dom
text() - 设置或获取所选元素的文本内容

html() - 设置或获取所选元素的内容（包括 HTML 标记）

val() - 设置或获取表单字段的值

attr()- 设置或获取属性的值

       有一个参数就是设置，没有参数就是获取！

removeAttr ()- 移除属性

操作样式
addClass()             给指定的元素添加样式类名

removeClass()        给指定的元素移除样式类名

toggleClass ()         给指定的元素切换样式类名

hasClass ()             判断是否有样式类名

操作元素
1.在内部添加

$(“div”).append(node)          // 在div内部元素的结尾追加元素node

node.appendTo(“div”)           // 把node追加到div内部元素的结尾

$(“div”).prepend(node)         // 在div内部元素的开头追加元素node

node.prependTo(“div”)         // 把node追加到div内部元素的开头

2.在外部添加

$(“div”).before(node)           // 在div后面添加兄弟节点node

$(“div”).after(node)              // 在div前面添加兄弟节点node

3.删除

remove() - 删除被选元素及其子元素（自杀）

empty() - 删除被选元素的子元素，不包括被选元素！

删除被选元素的子元素用html(“”)更加高效！

4.复制

clone()- 如果加参数true就是深层复制，会把之前绑定的事件也给复制

replaceWith()-替换节点

jQuery尺寸
1.宽度和高度

width()

height()

innerWidth()

innerHeight()

outerWidth()

outerHeight()

.height()方法和.css(“height”)的区别：

返回值不同：.height()方法返回的是数字类型(20)； .css(“height”)返回的是字符串类型(20px)

2.坐标值

offset()           //获取和设置元素在当前窗口的相对偏移，返回的是一个对象，设置值后自动变成相对定位       Object {top: 50, left:8}

position()       //只能获取元素相对于父亲的偏移，返回的是一个对象，不能设置值

获取值：offset().left     offset().top     position() .left        position() .top

设置值：$("p").offset({left:txtLeft,top:txtTop});

区别：

使用position()方法时事实上是把该元素当绝对定位来处理，获取的是该元素相当于最近的一个拥有绝对或者相对定位的父元素的偏移位置。使用position()方法时如果其所有的父元素都为默认定位（static）方式，则其处理方式和offset()一样，是当前窗口的相对偏移。

使用offset()方法不管该元素如何定位，也不管其父元素如何定位，都是获取的该元素相对于当前视口的偏移。

3.滚动条

scrollTop()     //获取或者设置垂直方向上到页面顶端的距离

scrollLeft()     // 获取或者设置水平方向上到页面左端的距离

scroll()           // 触发滚动事件：$(selector).scroll(function(){…});       

 

5.jQuery事件绑定机制
bind方式              
语法格式：.bind( eventType, [ eventData ], handler )

参数说明

第一个参数：事件类型

第二个参数：传递给事件响应方法的数据对象，可以省略。

事件响应方法中获取数据方式：e.data

第三个参数：事件响应方法  

1     $("p").bind("click",function(e){

2        //事件响应方法

3     });

one方式
语法格式：one( events [, data ], handler )

只绑定一次事件

delegate方式
语法格式：$(selector).delegate( selector, eventType, handler )

语法说明：

第一个参数:selector， 子选择器

第二个参数：事件类型

第三个参数：事件响应方法 

1          $(".parentBox").delegate("p","click", function(){

2             //为 .parentBox下面的所有的p标签绑定事件

3          });

on方式
jQuery1.7版本后，jQuery用on统一了所有的事件处理的方法

语法格式：$(selector).on( events, [ selector ],[ data ], handler )

参数介绍：

第一个参数：events，事件名

第二个参数：selector,类似delegate

第三个参数: 传递给事件响应方法的参数

第四个参数：handler，事件处理方法

1          //绑定一个方法

2          $( "#dataTable tbodytr" ).on( "click", function() {

3             console.log( $( this ).text() );

4          });

5           

6          //给子元素绑定事件

7          $( "#dataTable tbody").on( "click", "tr", function() {

8            console.log( $( this ).text() );

9          });

10       

11      //绑定多个事件的方式

12      $( "div.test" ).on({

13         click: function() {

14           $( this ).toggleClass( "active");

15         },

16      mouseenter: function() {

17           $( this ).addClass( "inside" );

18         },

19      mouseleave: function() {

20           $( this ).removeClass( "inside");

21          }

22       });

解绑事件
unbind解绑 bind方式绑定的事件( 在jQuery1.7以上被 on和off代替)
$(selector).unbind(); //解绑所有的事件
$(selector).unbind("click"); //解绑指定的事件
undelegate解绑delegate事件
$( "p" ).undelegate(); //解绑所有的delegate事件
$( "p" ).undelegate( "click" ); //解绑所有的click事件
off解绑on方式绑定的事件
$( "p" ).off();
$( "p" ).off( "click", "**" ); // 解绑所有的click事件，两个*表示所有
$( "body" ).off( "click", "p", foo );
1              案例1：

2              var foo = function() {

3                // Code to handle some kind of event

4              };

5           

6              // ... Now foo will be called whenparagraphs are clicked ...

7              $( "body" ).on("click", "p", foo );

8           

9              // ... Foo will no longer be called.

10          $( "body" ).off("click", "p", foo );

11       

12          案例2：（了解）解绑命名空间的方式：

13          var validate = function() {

14            // Code to validate form entries

15          };

16       

17          // Delegate events under the".validator" namespace

18          $( "form" ).on("click.validator", "button", validate );

19       

20          $( "form" ).on("keypress.validator", "input[type='text']", validate );

21       

22          // Remove event handlers in the".validator" namespace

23          $( "form" ).off( ".validator");

触发事件
简单事件触发：$(selector).click();//触发 click事件

trigger方法触发事件：$( "#foo" ).trigger( "click" );

triggerHandler触发事件响应方法，不触发浏览器行为：$("input" ).triggerHandler( "focus" );

event对象的简介
event.data              //传递的额外事件响应方法的额外参数

event.currentTarget      //在事件响应方法中等同于this，当前Dom对象

event.target             //事件触发源，不一定===this

event.pageX        

event.pageY

event.stopPropagation() //阻止事件冒泡

e.preventDefault();        //阻止默认行为

event.type             //事件类型：click，dbclick...

event.which           //鼠标的按键类型：左1 中2 右3

6.数据缓存：data( )
获取值：$(“div”).data(“index”);

设置值：$(“div”).data(“index”,3);

&  .data()跟.attr() 方法的区别：

1.        获取数据的时候，attr方法需要传入参数，data方法可以不传入参数，这时候获取到的是一个js对象，即使没有任何data属性。

2.        获取到的数据类型不同，attr方法获取到的数据类型是字符串(String)，data方法获取到的是相应的类型。

3.        data方法获取到数据之后，我们使用一个对象来接收它，那么就可以直接操作(设置值或获取值)这个对象，而attr方法不可以。并且通过这种方式，要比.data(key,value)的方式更高效！

4.        data-attribute属性会在页面初始化的时候放到jQuery对象，被缓存起来，而attr方法不会。


